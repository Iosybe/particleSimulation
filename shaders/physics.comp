#version 430 core

layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

struct Particle {
    vec2 pos;
    vec2 vel;
    float mass;
};

layout(std430, binding = 1) buffer particlesBuffer {
    int nopM1;
    int nopX128;
    Particle particles[];
};

layout(std430, binding = 2) buffer velocityBuffer {
    vec2 velBuffer[];
};

void main() {
    if (gl_GlobalInvocationID.y > nopM1 / 2) {
        return;
    }

    uint fitted = uint(gl_GlobalInvocationID.x >= gl_GlobalInvocationID.y);

    uvec2 particleIndices = uvec2((nopM1 - 1) * fitted - (gl_GlobalInvocationID.x + 1), nopM1 * fitted - gl_GlobalInvocationID.y);

    uvec2 velBufferIndices;
    velBufferIndices.x = (nopM1 * fitted - gl_GlobalInvocationID.y) * nopX128 + (nopM1 + 1) * fitted - gl_GlobalInvocationID.x - 1;
    velBufferIndices.y = particleIndices.x * nopX128 + particleIndices.y;

    vec2 diff = particles[particleIndices.x].pos - particles[particleIndices.y].pos;
    float distance = length(diff);

    if (distance > 20) {
        float gravWeight = 1 / pow(distance, 3);

        vec2 gravFactor; 
        gravFactor.x = particles[particleIndices.y].mass * gravWeight;
        gravFactor.y = particles[particleIndices.x].mass * gravWeight;

        velBuffer[velBufferIndices.x] = gravFactor.xx * diff;
        velBuffer[velBufferIndices.y] = -gravFactor.yy * diff;
    }
    else {
        velBuffer[velBufferIndices.x] = 0.0.xx;
        velBuffer[velBufferIndices.y] = 0.0.xx;
    }
}